# Use Debian Bullseye Slim as base image for better legacy support
FROM --platform=$TARGETPLATFORM debian:bullseye-slim

# Install essential utilities and networking tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    bash \
    bash-completion \
    curl \
    ca-certificates \
    wget \
    netcat-openbsd \
    dnsutils \
    jq \
    python2 \
    python2-dev \
    python3 \
    python3-pip \
    openssl \
    iputils-ping \
    traceroute \
    tcpdump \
    nmap \
    tree \
    file \
    less \
    vim \
    nano \
    findutils \
    coreutils \
    util-linux \
    postgresql-client \
    redis-tools \
    procps \
 && curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py \
 && python2 get-pip.py \
 && rm get-pip.py \
 && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
RUN pip3 install cassandra-driver requests

# Download and install Cassandra cqlsh
RUN mkdir -p /opt/cassandra \
 && cd /opt/cassandra \
 && wget https://archive.apache.org/dist/cassandra/3.11.16/apache-cassandra-3.11.16-bin.tar.gz \
 && tar -xzf apache-cassandra-3.11.16-bin.tar.gz \
 && rm apache-cassandra-3.11.16-bin.tar.gz

# Create cqlsh wrapper and install additional tools
RUN printf '#!/bin/bash\nexport PYTHONPATH="/opt/cassandra/apache-cassandra-3.11.16/pylib:$PYTHONPATH"\nexec python2 /opt/cassandra/apache-cassandra-3.11.16/bin/cqlsh.py "$@"\n' > /usr/local/bin/cqlsh \
 && chmod +x /usr/local/bin/cqlsh \
 && wget -O /usr/local/bin/rabbitmqadmin https://raw.githubusercontent.com/rabbitmq/rabbitmq-server/main/deps/rabbitmq_management/bin/rabbitmqadmin \
 && chmod +x /usr/local/bin/rabbitmqadmin

# Install MinIO client for the target architecture
ARG TARGETARCH
RUN if [ "$TARGETARCH" = "arm64" ]; then \
        wget https://dl.min.io/client/mc/release/linux-arm64/mc -O /usr/local/bin/mc; \
    else \
        wget https://dl.min.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc; \
    fi \
 && chmod +x /usr/local/bin/mc

# Copy and setup scripts
COPY scripts/entrypoint.py scripts/es-debug.py /usr/local/bin/
RUN chmod +x /usr/local/bin/entrypoint.py /usr/local/bin/es-debug.py \
 && ln -s /usr/local/bin/es-debug.py /usr/local/bin/es \
 && ln -s /tmp/status.sh /usr/local/bin/status

# Create non-root user
RUN adduser --disabled-password --gecos "" --uid 65532 nonroot

# Switch to non-root user and set environment
USER nonroot
ENV HOME=/home/nonroot \
    SHELL=/bin/bash \
    TERM=xterm-256color \
    PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
WORKDIR /home/nonroot

# Use Python entrypoint
ENTRYPOINT ["python3", "-u", "/usr/local/bin/entrypoint.py"]